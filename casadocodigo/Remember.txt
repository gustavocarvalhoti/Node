********************************************************************************
Executando o npm (Cria o package.json que guarda as libs)
npm init

npm install express --save    <- Gerencia as urls
sudo npm install -g nodemon   <- Reload
npm install mysql --save      <- MySQL Database

nodemon app                   <- Roda o nodemon
npm install                   <- Se eu coloquei o --save acima o proximo que utilizar só roda o install

********************************************************************************
Atualizar o Node.js
sudo apt-get install npm
sudo apt-get install nodejs
sudo npm cache clean -f
sudo npm install -g n
sudo n stable
npm -v
node -v

********************************************************************************
npm -> Dependências
node -> Executa comandos

********************************************************************************
Executar um arquivo -> node produtos.js

********************************************************************************
Criando um servidor web
// Iniciando um servidor na porta 3000 que retorna um HTML simples
var http = require('http');
var server = http.createServer(function (req, res) {
  res.end("<html><body><h1>Listando os produtos</h1></body></html>");
});
server.listen(3000);
console.log("Servidor ta rodando");

********************************************************************************
Retorna o status da request - res.writeHead
var http = require('http');
var porta = 3000;
var ip = "localhost";
var server = http.createServer(function (req, res) {
  // Retorna o status da request
  // 200 - Sucesso
  // 400 - Bad Request
  // 500 - Internal Server Error
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.end('<html><body>Request recebido!</body></html>');
});
server.listen(porta, ip);

********************************************************************************
// Verificando a url
if (req.url == "/produtos") {
  res.end("<html><body>listando os produtos da loja</body>");
} else {
  res.end("<html><body>home da casa do codigo</body></html>");
}

********************************************************************************
#Utilizando express
npm install express --save <- Instalando
#Codigo
var express = require('express');
var app = express();
app.get('/', function (req, res) {
  res.send("<html><body><h1>Home</h1></body></html>");
});
app.get('/produtos', function (req, res) {
  res.send("<html><body><h1>Listagem de produtos</h1></body></html>");
});
app.listen(3000, function () {
  console.log("Servidor rodando");
});
#Rodando
node app.js

********************************************************************************
#Utilizando o EJS - Cria páginas dinâmicas
npm install ejs --save

[file -> app.js]
/*
Para que o Express reconheça a Engine EJS,
você precisa adicioná-la como uma view engine da sua app
 */
app.set('view engine','ejs');
app.get('/produtos',function(req,res){
    // Ele chama essa página que fica dentro da pasta views
    res.render("produtos/lista")
});

[file -> lista.ejs]
<html>
<body>
<table>
    <tr>
        <td>id</td>
        <td>nome</td>
    </tr>
    <tr>
        <td>1</td>
        <td>livro de node js</td>
    </tr>
</table>
</body>
</html>

********************************************************************************
#Monitorando as mudanças e reiniciando o servidor com o Nodemon
npm install -g nodemon <- O "-g" instala global, somente para o DEV
agora da para rodar o projeto com -> nodemon app

********************************************************************************
#Isolando as configurações do Express
[file -> config/express.js]
// Retorna sempre a mesma versão do objeto
var app = require('express')();
// Para utilizar paginas dinamicas
app.set('view engine', 'ejs');
// Exporta o app
module.exports = function () {
    return app;
};

[file -> app.js]
var app = require('./config/express')();

********************************************************************************
#CommonJS é uma convenção para carregamentos de módulos javascript
em aplicações server-side.
O objeto que o node disponibiliza é o module e a função é passada
para o atributo exports desse objeto.

********************************************************************************
#Isolando o código das rotas
[file -> casadocodigo/app/routes/produtos.js]
Criar o arquivo com as rotas
module.exports = function (app) {
  app.get('/produtos', function (req, res) {
    res.render("produtos/lista");
  });
};

[file -> casadocodigo/app.js]
var app = require('./config/express')();
#Passar o app para ele
require('./app/routes/produtos')(app);

********************************************************************************
# Consultando o banco de dados
npm install mysql --save <- Instalando
[file -> casadocodigo/app/routes/produtos.js]
module.exports = function (app) {
  app.get('/produtos', function (req, res) {
    var mysql = require('mysql');

    var connection = mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: 'padtec',
      database: 'casadocodigo_nodejs'
    });

    connection.query('select * from livros', function (err, results) {
      res.send(results);
    });
    connection.end();

    //res.render("produtos/lista");
  });
};

********************************************************************************
# Isolando a criação da conexão com o banco de dados


********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************
********************************************************************************